{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marko\\\\Desktop\\\\ufindi-konacno\\\\Front27.5\\\\src\\\\komponente\\\\Chat.js\",\n  _s = $RefreshSig$();\n//npm install @microsoft/signalr\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport ChatRoom from './ChatRoom';\nimport { AppContext } from \"../App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  var _location$state;\n  const navigate = useNavigate();\n  const location = useLocation();\n  const chatRoom = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.chatRoom;\n  const [conn, setConnection] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const korisnik = useContext(AppContext).korisnik;\n  const jezik = useContext(AppContext).jezik;\n  useEffect(() => {\n    const connectToHub = async () => {\n      try {\n        const connection = new HubConnectionBuilder().withUrl(\"https://localhost:7080/chat\").configureLogging(LogLevel.Information).build();\n        connection.on(\"ReceiveMessage\", (username, msg) => {\n          setMessages(messages => [...messages, {\n            senderUsername: username,\n            message: msg\n          }]);\n        });\n        connection.on('LoadMessages', loadedMessages => {\n          setMessages(loadedMessages);\n        });\n        connection.on('Error', errorMessage => {\n          console.error(\"Server error:\", errorMessage);\n          alert(errorMessage);\n        });\n        await connection.start();\n        await connection.invoke(\"JoinSpecificChatRoom\", chatRoom);\n        await connection.invoke('LoadMessages', chatRoom);\n        setConnection(connection);\n      } catch (e) {\n        window.alert(jezik.general.error.netGreska + \": \" + e.message);\n      }\n    };\n    if (!conn) {\n      connectToHub();\n    }\n    return () => {\n      if (conn) {\n        conn.stop();\n      }\n    };\n  }, [chatRoom, conn]);\n  const sendMessage = async message => {\n    const drugaStranaID = chatRoom.split('_').find(id => id !== korisnik.id.toString());\n    const senderId = korisnik.id;\n    const receiverId = parseInt(drugaStranaID);\n    try {\n      await conn.invoke(\"SendMessage\", chatRoom, message, senderId, receiverId);\n    } catch (e) {\n      window.alert(jezik.general.error.netGreska + \": \" + e.message);\n    }\n  };\n  const handleClose = () => {\n    navigate('/profile');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ChatRoom, {\n      messages: messages,\n      sendMessage: sendMessage,\n      username: korisnik.username,\n      onClose: handleClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"Oxy4BZMvDkW7tqGvCfDbrPe17So=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useLocation","useNavigate","HubConnectionBuilder","LogLevel","ChatRoom","AppContext","jsxDEV","_jsxDEV","Chat","_s","_location$state","navigate","location","chatRoom","state","conn","setConnection","messages","setMessages","korisnik","jezik","connectToHub","connection","withUrl","configureLogging","Information","build","on","username","msg","senderUsername","message","loadedMessages","errorMessage","console","error","alert","start","invoke","e","window","general","netGreska","stop","sendMessage","drugaStranaID","split","find","id","toString","senderId","receiverId","parseInt","handleClose","children","onClose","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/marko/Desktop/ufindi-konacno/Front27.5/src/komponente/Chat.js"],"sourcesContent":["//npm install @microsoft/signalr\r\n\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\nimport ChatRoom from './ChatRoom';\r\nimport { AppContext } from \"../App\";\r\n\r\nconst Chat = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const chatRoom = location.state?.chatRoom;\r\n  const [conn, setConnection] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const korisnik = useContext(AppContext).korisnik;\r\n  const jezik = useContext(AppContext).jezik\r\n\r\n  useEffect(() => {\r\n\r\n    const connectToHub = async () => {\r\n      try {\r\n        const connection = new HubConnectionBuilder()\r\n          .withUrl(\"https://localhost:7080/chat\")\r\n          .configureLogging(LogLevel.Information)\r\n          .build();\r\n\r\n        connection.on(\"ReceiveMessage\", (username, msg) => {\r\n          setMessages(messages => [...messages, { senderUsername: username, message: msg }]);\r\n        });\r\n\r\n        connection.on('LoadMessages', (loadedMessages) => {\r\n          setMessages(loadedMessages);\r\n        });\r\n\r\n        connection.on('Error', (errorMessage) => {\r\n          console.error(\"Server error:\", errorMessage);\r\n          alert(errorMessage);\r\n        });\r\n\r\n        await connection.start();\r\n\r\n        await connection.invoke(\"JoinSpecificChatRoom\", chatRoom );\r\n        await connection.invoke('LoadMessages', chatRoom);\r\n\r\n        setConnection(connection);\r\n      } catch (e) {\r\n        window.alert(jezik.general.error.netGreska + \": \" + e.message)\r\n      }\r\n    };\r\n\r\n    if (!conn) {\r\n      connectToHub();\r\n    }\r\n\r\n    return () => {\r\n      if (conn) {\r\n        conn.stop();\r\n      }\r\n    };\r\n  }, [chatRoom, conn]);\r\n\r\n  const sendMessage = async (message) => {\r\n    const drugaStranaID = chatRoom.split('_').find(id => id !== korisnik.id.toString());\r\n    const senderId = korisnik.id;\r\n    const receiverId = parseInt(drugaStranaID);\r\n\r\n    try {\r\n      await conn.invoke(\"SendMessage\",  chatRoom , message, senderId, receiverId);\r\n    } catch (e) {\r\n      window.alert(jezik.general.error.netGreska + \": \" + e.message)\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    navigate('/profile');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ChatRoom messages={messages} sendMessage={sendMessage} username={korisnik.username} onClose={handleClose}></ChatRoom>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}